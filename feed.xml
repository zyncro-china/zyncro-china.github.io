<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2014-07-24T10:26:00+08:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Decision Tree</title>
    <link rel="alternate" href="http://blog.url.com/2014/07/24/decision-tree/"/>
    <id>http://blog.url.com/2014/07/24/decision-tree/</id>
    <published>2014-07-24T10:26:00+08:00</published>
    <updated>2014-07-24T11:44:10+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;数据分析服务: BigML&lt;/h2&gt;

&lt;p&gt;今天我看到一个数据分析的服务，可以上传CSV的数据，分析后可以预测新的结果。&lt;/p&gt;

&lt;p&gt;它有几个步骤&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;上传CSV数据,并设定每行的数据类型，如数字，字符。数据最后一列必须是结果列&lt;/li&gt;
&lt;li&gt;建立数据集，这个过程需要几秒或几小时。需要选定需要分析的属性，最终会给出一个属性列表，显示属性的一些统计数据：缺失数据，错误和直方图&lt;/li&gt;
&lt;li&gt;建立模型，通过数据集生成模型&lt;/li&gt;
&lt;li&gt;为新输入预测结果&lt;/li&gt;
&lt;li&gt;建立ensembles，可以用所有的输入行和列来生产多个model，合成一个ensemble,用户可以这样比较哪种组合比较合理&lt;/li&gt;
&lt;li&gt;评估模型或ensembles&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;背后的机器学习算法 decision tree&lt;/h2&gt;

&lt;p&gt;decision tree是一种很直观的机器学习算法。给定一些training data,
里面包含了一些属性，算法的目的是学习隐藏在数据里的决策函数(decision
function),并可以用它来分类新的输入。
decision
tree算法不想用到所有的属性，而是想去掉那些弱因素，只保留强因素，并把强因素放在上方。&lt;/p&gt;

&lt;p&gt;&lt;img alt="Decision Tree Example" src="/images/xdiscrete-tree.png.pagespeed.ic.png" /&gt;&lt;/p&gt;

&lt;p&gt;每个属性的强弱可以用information gain表示，可以用公式计算。&lt;/p&gt;

&lt;p&gt;&lt;img alt="Information Gain" src="/images/xinformation-gain-formula.png.pagespeed.ic.png" /&gt;&lt;/p&gt;

&lt;h2&gt;Ruby gem for decision tree: decisiontree&lt;/h2&gt;

&lt;p&gt;如果想自己做decision tree，不使用其他服务，可以用decisiontree这个ruby gem。&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rubygems'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'decisiontree'&lt;/span&gt;

&lt;span class="n"&gt;attributes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Age'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Education'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Income'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Marital Status'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;training&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'36-55'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Masters'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'High'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Single'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'18-35'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'High School'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Low'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Single'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt; 18'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'High School'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Low'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Married'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="c1"&gt;# ... more training examples&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Instantiate the tree, and train it based on the data (set default to '1')&lt;/span&gt;
&lt;span class="n"&gt;dec_tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;DecisionTree&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ID3Tree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;training&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:discrete&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dec_tree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;train&lt;/span&gt;

&lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt; 18'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'High School'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Low'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Single'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;decision&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dec_tree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Predicted: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;decision&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ... True decision: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;last&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Graph the tree, save to 'discrete.png'&lt;/span&gt;
&lt;span class="n"&gt;dec_tree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"discrete"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Try facebook testing lib Jest</title>
    <link rel="alternate" href="http://blog.url.com/2014/05/19/try-facebook-testing-lib-jest/"/>
    <id>http://blog.url.com/2014/05/19/try-facebook-testing-lib-jest/</id>
    <published>2014-05-19T16:56:00+08:00</published>
    <updated>2014-05-19T17:24:38+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;The new testing framework from facebook&lt;/h2&gt;

&lt;p&gt;Facebook released their new testing framework:
&lt;a href="http://facebook.github.io/jest/"&gt;Jest&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It seems to be very nice that can help you to mock the dependencies
automatically:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In order to write an effective unit test, you want to be able to isolate a unit
of code and test only that unit – nothing else. It is fairly common and good
practice to consider a module such a unit, and this is where Jest excels. Jest
makes isolating a module from its dependencies extremely easy by automatically
generating mocks for each of the module&amp;rsquo;s depenedencies and providing those
mocks (rather than the real dependency modules) by default.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Jest actually inspect the file that the code under test are requiring, then
mock every properties of the required object, and generate the mocked function.&lt;/p&gt;

&lt;p&gt;In this way, we don&amp;rsquo;t have to manually generate mocks for testing. This is
a huge benefits when writteing tests.&lt;/p&gt;

&lt;h2&gt;writing tests in coffeescript&lt;/h2&gt;

&lt;p&gt;I also like to use coffeescript these days. But everytime, it seems that I need
to pay more efforts to make it works, especially when the project is mainly
developed only using javascript.&lt;/p&gt;

&lt;p&gt;Jest have a page explained &lt;a href="http://facebook.github.io/jest/docs/tutorial-coffeescript.html#content"&gt;how to use
coffeescript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just added following contents:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight javascript"&gt;&lt;span class="c1"&gt;// package.json&lt;/span&gt;
  &lt;span class="s2"&gt;"dependencies"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"coffee-script"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s2"&gt;"jest"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"scriptPreprocessor"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"preprocessor.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"testFileExtensions"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"coffee"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"js"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// preprocessor.js&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;coffee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'coffee-script'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;process&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;coffee$/&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;coffee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'bare'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have used that way and it can&amp;rsquo;t work, it always return following result:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight shell"&gt; Found 0 matching tests...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After some code reading, I found the TestRunner.js in Jest may construct the RegExp incorrectly. For js and coffeescript, it generate following RegExp:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;//__tests__/.*\.(js\|coffee)$/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But it should be &lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;//__tests__/.*\.(js|coffee)$/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After testing, and submit the patch to Jest&amp;rsquo;s github &lt;a href="https://github.com/facebook/jest/pull/34"&gt;pullrequest&lt;/a&gt;. Then I found that I also need to sign the CLA(Contributor License Agreement) to submit the code to facebook. And that CLA link is blocked in China. Fortunately I have a VPN. So I think there will be very little patch from China.&lt;/p&gt;

&lt;p&gt;Now I can continue trying Jest after spending half of the day to figure out this problem.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Reading notes of a rubymotion book</title>
    <link rel="alternate" href="http://blog.url.com/2014/03/27/reading-notes-of-a-rubymotion-book/"/>
    <id>http://blog.url.com/2014/03/27/reading-notes-of-a-rubymotion-book/</id>
    <published>2014-03-27T14:38:00+08:00</published>
    <updated>2014-05-19T16:48:52+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h3&gt;Use NSLog instead of puts&lt;/h3&gt;

&lt;p&gt;Because puts wouldn&amp;rsquo;t output to device logs&lt;/p&gt;

&lt;h3&gt;RubyMotion provide help for 3 things&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;flexible workflow(editor, command line, repl)&lt;/li&gt;
&lt;li&gt;use ruby language&lt;/li&gt;
&lt;li&gt;skip the large set of new API have to learn&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Value Object&lt;/h3&gt;

&lt;p&gt;There are 4 value object classes
1. NSString
1. NSNumber
1. NSDate
1. NSData( for byte buffers)&lt;/p&gt;

&lt;h3&gt;Major design patterns in iOS development&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;MVC(the main difference from rails is that working with user interactions
and system events instead of HTTP requests)&lt;/li&gt;
&lt;li&gt;Delegation&lt;/li&gt;
&lt;li&gt;Protocols&lt;/li&gt;
&lt;li&gt;Notification Center(Pub/Sub)&lt;/li&gt;
&lt;li&gt;Target-Action&lt;/li&gt;
&lt;li&gt;Key-Value Observing(more Observers)&lt;/li&gt;
&lt;li&gt;View Hierarchy&lt;/li&gt;
&lt;li&gt;responder Chain&lt;/li&gt;
&lt;li&gt;Receptionist&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;MVC pattern&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;difference between iOS and Rails
The main changes to controller and view layers in relation to events&lt;/li&gt;
&lt;li&gt;models are not alwasy database based&lt;/li&gt;
&lt;li&gt;view objects are inherit from UIView or NSView, and responsible for drawing
theirselves and subviews. In the case of controls, handling user interaction
and input, then tell the controller about it.&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  <entry>
    <title>create iOS app using Promotion</title>
    <link rel="alternate" href="http://blog.url.com/2014/03/24/create-ios-app-using-promotion/"/>
    <id>http://blog.url.com/2014/03/24/create-ios-app-using-promotion/</id>
    <published>2014-03-24T17:10:00+08:00</published>
    <updated>2014-05-19T16:43:30+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;The Goal&lt;/h2&gt;

&lt;p&gt;Create an iOS app as quickly as we can.&lt;/p&gt;

&lt;h2&gt;Project Setup&lt;/h2&gt;

&lt;h3&gt;Create a new app&lt;/h3&gt;
&lt;pre&gt;&lt;code class="highlight shell"&gt;
promotion new membershipapp
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;run tests automatically&lt;/h3&gt;
&lt;pre&gt;&lt;code class="highlight shell"&gt;
gem install when-files-change
when-files-change &lt;span class="s2"&gt;"clear &amp;amp;&amp;amp; bundle exec rake spec"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;write test cases&lt;/h2&gt;

&lt;p&gt;The Promotion TDD framework will instantiate @controller and add a test @app by tests method, we need to call the Promotion::Screen.new and want to use screen instead of controller:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;&lt;span class="c1"&gt;#home_screen_spec.rb&lt;/span&gt;

&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;HomeScreen&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;tests&lt;/span&gt; &lt;span class="no"&gt;HomeScreen&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;controller&lt;/span&gt;
    &lt;span class="vi"&gt;@controller&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="no"&gt;HomeScreen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;alias&lt;/span&gt; &lt;span class="ss"&gt;:screen&lt;/span&gt; &lt;span class="ss"&gt;:controller&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;"is a TableScreen"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;should&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;kind_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PM&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;TableScreen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;create a basic tab screen&lt;/h2&gt;

&lt;p&gt;The Tabs module is mixed into PM::Screen, to use it, just prepare all the screens, declaring their title and icon, then init screens then call open_tab_bar(*screens) in the main screen&lt;/p&gt;

&lt;h2&gt;Styling the screen using teacup&lt;/h2&gt;

&lt;p&gt;Don&amp;rsquo;t forget to set height and width attributes in the Teacup::Stylesheet, I forget to set it and get nothing to display in the screen.&lt;/p&gt;

&lt;h2&gt;Fix the UITableView Hiding Under Scroll Bar in iOS7&lt;/h2&gt;

&lt;p&gt;to fix this, just use the navigation controller together.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>tips learn from confident ruby</title>
    <link rel="alternate" href="http://blog.url.com/2014/03/24/tips-learn-from-confident-ruby/"/>
    <id>http://blog.url.com/2014/03/24/tips-learn-from-confident-ruby/</id>
    <published>2014-03-24T11:21:00+08:00</published>
    <updated>2014-05-19T16:20:01+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;The book confident ruby&lt;/h2&gt;

&lt;p&gt;After reading the book confident ruby, I want the screen cast with that book
and learned following tips&lt;/p&gt;

&lt;h3&gt;use each&lt;em&gt;with&lt;/em&gt;object instead of initialize an empty object before the each&lt;/h3&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;
&lt;span class="n"&gt;topics_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;another_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;topics_list&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;should turn into&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;another_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each_with_object&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;topics_list&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;topics_list&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;don&amp;rsquo;t use collection.present? to check if collection exist and nonempty ,use Array()&lt;/h3&gt;

&lt;h3&gt;skip the iteration at the top of the block&lt;/h3&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;
&lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;topics&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;accept user or user_id with confident&lt;/h3&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;
&lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
&lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;Fixnum&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To reduce the duplication, refactor to:
&amp;ldquo;`ruby&lt;/p&gt;

&lt;p&gt;private
def user&lt;em&gt;id&lt;/em&gt;for(user&lt;em&gt;or&lt;/em&gt;id)
  case user&lt;em&gt;or&lt;/em&gt;id
  when Integer then user&lt;em&gt;or&lt;/em&gt;id
  else
    user&lt;em&gt;or&lt;/em&gt;id.id
  end
end
&amp;rdquo;`&lt;/p&gt;

&lt;p&gt;if define the private method, then use:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight ruby"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;user_id_for&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nf"&gt;end&lt;/span&gt;
&lt;span class="nb"&gt;private_class_method&lt;/span&gt; &lt;span class="ss"&gt;:user_id_for&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;return early(using guard) instead of using if at the top of the method&lt;/h3&gt;

&lt;h3&gt;rescue at the top level of the method, to avoid the indent and begin block&lt;/h3&gt;
</content>
  </entry>
  <entry>
    <title>Deploy R application to shinyapps.io</title>
    <link rel="alternate" href="http://blog.url.com/2014/03/18/deploy-r-application-to-shinyapps-io/"/>
    <id>http://blog.url.com/2014/03/18/deploy-r-application-to-shinyapps-io/</id>
    <published>2014-03-18T09:53:00+08:00</published>
    <updated>2014-05-19T16:20:01+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;An R hosting Service&lt;/h2&gt;

&lt;p&gt;Today I got an invitation for ShinyApps.io testing. This seems to be very
useful because other PaaS like Heroku not allowing install R.&lt;/p&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;Just follow the guide from
https://github.com/rstudio/shinyapps/blob/master/guide/guide.mdhttps://github.com/rstudio/shinyapps/blob/master/guide/guide.md&lt;/p&gt;

&lt;h2&gt;run the App&lt;/h2&gt;
&lt;pre&gt;&lt;code class="highlight r"&gt;
&lt;span class="n"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shiny&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;runApp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Trouble Shooting&lt;/h2&gt;

&lt;p&gt;When the first time I deploy my apps, it always returns: &lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight shell"&gt;
&lt;span class="gp"&gt;&amp;gt; &lt;/span&gt;deployApp&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Preparing to deploy application...Error: /v1/applications/ 400 - Bad Request
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally I found that it is because my project directory is used as the app
name, so change it to something else make it works.&lt;/p&gt;

&lt;h2&gt;Multiple pages solution&lt;/h2&gt;

&lt;p&gt;Shiny App only support Single Page Application workflow, but there is some
discussion for multiple pages:
https://groups.google.com/forum/#!searchin/shiny-discuss/multiple/shiny-discuss/GAiZ4m13EHY/yKpkqmv9QuMJ&lt;/p&gt;
</content>
  </entry>
</feed>
