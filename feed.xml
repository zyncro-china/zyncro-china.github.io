<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2014-03-05T03:01:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>ZeroMQ in Ruby</title>
    <link rel="alternate" href="http://blog.url.com/2014/03/05/zeromq-in-ruby/"/>
    <id>http://blog.url.com/2014/03/05/zeromq-in-ruby/</id>
    <published>2014-03-05T03:01:00Z</published>
    <updated>2014-03-05T13:24:48+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;2 ways to write concurrent program&lt;/h2&gt;

&lt;p&gt;In order to make use of all cpu cores and increase the capability, we need to
write concurrent programs that can communicate with each other.&lt;/p&gt;

&lt;p&gt;There are 2 different communication options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;inter-thread&lt;/li&gt;
&lt;li&gt;inter-process&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When using inter-thread option, the thread can share the same memory space in
the process. But shared data in different running thread can also easily cause some bug that is hard to find. It is also limited on the same host. So it is not scalable.&lt;/p&gt;

&lt;p&gt;Inter-process takes more memory space, but it has no disadvantage as the
inter-thread option. So inter-process option is preferred in most of the cases.&lt;/p&gt;

&lt;h2&gt;Inter-Process communication&lt;/h2&gt;

&lt;p&gt;on unix system, There are at least 2 ways to implement inter-process
communication:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;pipe&lt;/li&gt;
&lt;li&gt;socket(tcp, udp, unix)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the shell, using | can pass the data between different program.&lt;/p&gt;

&lt;p&gt;And mkfifo can also create a named pipe(fifo). It can easily be used to shared
data between unrelated process.&lt;/p&gt;

&lt;p&gt;TCP socket is reliable and UDP is not reliable. UNIX socket is only available
on the same host.&lt;/p&gt;

&lt;h2&gt;ZeroMQ and its communication models&lt;/h2&gt;

&lt;p&gt;ZeroMQ provides a wrapper for inter-process(also include inter-thread) communication.&lt;/p&gt;

&lt;p&gt;The underlying implementation includes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;tcp
It use TCP Socket, and don&amp;rsquo;t tell the port number because there is no
authentication&lt;/li&gt;
&lt;li&gt;ipc
It use UNIX Socket.&lt;/li&gt;
&lt;li&gt;inproc
It avoid manually shared data between different threads.&lt;/li&gt;
&lt;li&gt;multicast
Implemented in UDP multicast, but some router could ban this.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The ZeroMQ communication models includes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;REQ/REP&lt;/li&gt;
&lt;li&gt;PUB/SUB&lt;/li&gt;
&lt;li&gt;PUSH/PULL&lt;/li&gt;
&lt;li&gt;PAIR&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Using ZeroMQ in Ruby&lt;/h2&gt;

&lt;h3&gt;Install&lt;/h3&gt;

&lt;p&gt;gem install zmq&lt;/p&gt;

&lt;h3&gt;Usage&lt;/h3&gt;

&lt;p&gt;For the REQ/REP model:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;
&lt;span class="c1"&gt;# rep.rb&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;zmq&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ZMQ&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Context&lt;/span&gt;&lt;span class="nf"&gt;.new&lt;/span&gt;
&lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="nf"&gt;.socket&lt;/span&gt; &lt;span class="no"&gt;ZMQ&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;REP&lt;/span&gt;
&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="nf"&gt;.bind&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tcp://127.0.0.1:5000&amp;#39;&lt;/span&gt;

&lt;span class="kp"&gt;loop&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="nf"&gt;.recv&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Got: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="nf"&gt;.send&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# req.rb&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;zmq&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ZMQ&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Context&lt;/span&gt;&lt;span class="nf"&gt;.new&lt;/span&gt;
&lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="nf"&gt;.socket&lt;/span&gt; &lt;span class="no"&gt;ZMQ&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;REQ&lt;/span&gt;
&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="nf"&gt;.connect&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tcp://127.0.0.1:5000&amp;#39;&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nf"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="nf"&gt;.send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;msg %s&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="nf"&gt;.recv&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Replied: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;the end&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="nf"&gt;.close&lt;/span&gt;

&lt;/pre&gt;
&lt;p&gt;Remember to call socket.close before exit the program.&lt;/p&gt;

&lt;p&gt;Using * instead of 127.0.0.1 can accept all hosts&lt;/p&gt;

&lt;p&gt;The client and server don&amp;rsquo;t have to start in order.&lt;/p&gt;

&lt;h3&gt;Create a Chatting Service&lt;/h3&gt;

&lt;p&gt;Using Push/Pull and Pub/Sub models, we can create a chatting service.
We need 2 sockets:
1. message-queue
1. message-display&lt;/p&gt;

&lt;p&gt;The chatting client push the new message to the message-queue socket, and subscribe a message-display socket.&lt;/p&gt;

&lt;p&gt;The chatting server pull from the message-queue socket, then publish to the message-display socket&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Write auto running task on raspberry pi</title>
    <link rel="alternate" href="http://blog.url.com/2014/03/01/write-auto-running-task-on-raspberry-pi/"/>
    <id>http://blog.url.com/2014/03/01/write-auto-running-task-on-raspberry-pi/</id>
    <published>2014-03-01T14:26:00Z</published>
    <updated>2014-03-01T01:28:22+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h3&gt;A cheap board running complete linux OS&lt;/h3&gt;

&lt;p&gt;Not like Arduino, the Raspberry Pi board can run a full linux OS and also have
GPIO pins, so there are more thing could be done on the Raspberry Pi. Now
I need to find out how to run some task automatically when the board boots.&lt;/p&gt;

&lt;h3&gt;Install Upstart package&lt;/h3&gt;

&lt;p&gt;When install upstart, it ask some message that make me worry:&lt;/p&gt;
&lt;pre class="highlight text"&gt;
You are about to do something potentially harmful.
To continue type in the phrase &amp;#39;Yes, do as I say!&amp;#39;


...
Installing new version of config file /etc/modprobe.d/fbdev-blacklist.conf ...
Installing new version of config file /etc/init.d/udev ...
initctl: Unable to connect to Upstart: Failed to connect to socket /com/ubuntu/upstart: Connection refused
[ ok ] Stopping the hotplug events dispatcher: udevd.
[ ok ] Starting the hotplug events dispatcher: udevd.
update-initramfs: deferring update (trigger activated)
Setting up libjson0:armhf (0.10-1.2) ...
Setting up upstart (1.6.1-1) ...
Processing triggers for initramfs-tools ...
&lt;/pre&gt;
&lt;p&gt;I follow the instruments and reboot. Then it can&amp;rsquo;t boot to the login prompt again.&lt;/p&gt;

&lt;p&gt;After re-write the new image to the SDCard, and the above process runs fine.&lt;/p&gt;

&lt;h3&gt;Write a new upstart task&lt;/h3&gt;

&lt;h4&gt;check the syntax&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;init-checkconf -d myservice.conf&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Notes: a work around when the checking meets error: &amp;ldquo;ERROR: failed to ask
Upstart to check conf file&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bugs.launchpad.net/upstart/+bug/881885"&gt;init-checkconf bug&lt;/a&gt;&lt;/p&gt;
&lt;pre class="highlight text"&gt;
sudo apt-get install dbus-x11
eval `dbus-launch --auto-syntax`
&lt;/pre&gt;
&lt;h4&gt;list the service&lt;/h4&gt;

&lt;p&gt;initctl list&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Compile vim source with python and ruby support</title>
    <link rel="alternate" href="http://blog.url.com/2014/02/28/compile-vim-source-with-python-and-ruby-support/"/>
    <id>http://blog.url.com/2014/02/28/compile-vim-source-with-python-and-ruby-support/</id>
    <published>2014-02-28T05:52:00Z</published>
    <updated>2014-02-28T14:01:17+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;vim,ruby,python&lt;/p&gt;

&lt;h3&gt;Compile the vim after upgrade ruby to 2.1.1&lt;/h3&gt;

&lt;p&gt;After I upgrade to ruby 2.1.1, I found the vim can&amp;rsquo;t work, so I get the source of vim and compile it again.&lt;/p&gt;

&lt;p&gt;It is weird that the src/Makefile can&amp;rsquo;t take effect, I have to manually input the configure parameters:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;
 ./configure --with-features&lt;span class="o"&gt;=&lt;/span&gt;HUGE &lt;span class="se"&gt;\&lt;/span&gt;
--enable-multibyte&lt;span class="o"&gt;=&lt;/span&gt;yes &lt;span class="se"&gt;\&lt;/span&gt;
--enable-rubyinterp&lt;span class="o"&gt;=&lt;/span&gt;yes &lt;span class="se"&gt;\&lt;/span&gt;
    --with-ruby-command&lt;span class="o"&gt;=&lt;/span&gt;/home/david/.rvm/rubies/ruby-2.1.1/bin/ruby &lt;span class="se"&gt;\&lt;/span&gt;
    --enable-gui&lt;span class="o"&gt;=&lt;/span&gt;gnome2 &lt;span class="se"&gt;\&lt;/span&gt;
    --with-x &lt;span class="se"&gt;\&lt;/span&gt;
    --enable-pythoninterp&lt;span class="o"&gt;=&lt;/span&gt;yes &lt;span class="se"&gt;\&lt;/span&gt;
--with-python-config-dir&lt;span class="o"&gt;=&lt;/span&gt;/usr/lib/python2.7/config/


make

sudo make install

&lt;/pre&gt;
&lt;p&gt;For the Command-T plugin:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;ruby
ruby extconf.rb
make
&lt;/pre&gt;
&lt;p&gt;Done!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Hacking simplewebrtc.js to change the video resolution</title>
    <link rel="alternate" href="http://blog.url.com/2014/02/25/hacking-simplewebrtc-js-to-change-the-video-resolution/"/>
    <id>http://blog.url.com/2014/02/25/hacking-simplewebrtc-js-to-change-the-video-resolution/</id>
    <published>2014-02-25T07:37:00Z</published>
    <updated>2014-02-24T16:05:44+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Introduction webrtc and simplewebrtc.js&lt;/h2&gt;

&lt;p&gt;I am very exciting about WebRTC technology. It makes the browser can provide
some peer to peer functionalities that can&amp;rsquo;t be thought before.&lt;/p&gt;

&lt;p&gt;The only limitation now is that only a few mainframe browsers support WebRTC,
and they use different API.&lt;/p&gt;

&lt;p&gt;I think this is where simplewebrtc.js can help the WebRTC development easier. By
using the unified interface, developer don&amp;rsquo;t have to handle the difference
between browsers.&lt;/p&gt;

&lt;p&gt;I hope this library will not be too complicated, as its
name suggests. So that I can modify when I need, without having to read many
code that I don&amp;rsquo;t use.&lt;/p&gt;

&lt;h2&gt;The SimpleWebRTC can&amp;rsquo;t customize the video resolution&lt;/h2&gt;

&lt;p&gt;The simplewebrtc doesn&amp;rsquo;t support changing constraints.&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;
&lt;span class="nx"&gt;SimpleWebRTC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startLocalVideo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webrtc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startLocalMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;attachMediaStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getLocalVideoContainer&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;muted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;mirror&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In order to pass in the constraints, I override this function(I write the app
in coffeescript):&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;
&lt;span class="nx"&gt;SimpleWebRTC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startLocalVideo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;constraints&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;video&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;audio&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;webrtc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startLocalMedia&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;constraints&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;
      &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="nx"&gt;attachMediaStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLocalVideoContainer&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;muted&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;mirror&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Then we can pass the constraints in the constructor:&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;span class="nx"&gt;webrtc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SimpleWebRTC&lt;/span&gt;
  &lt;span class="na"&gt;localVideoEl&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;localVideo&amp;#39;&lt;/span&gt;
  &lt;span class="na"&gt;remoteVideosEl&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;remotes&amp;#39;&lt;/span&gt;
  &lt;span class="na"&gt;autoRequestMedia&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;detectSpeakingEvents&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;autoAdjustMic&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
  &lt;span class="na"&gt;constraints&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;audio&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;video&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;mandatory&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;maxWidth&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;320&lt;/span&gt;
        &lt;span class="na"&gt;maxHeight&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;
&lt;/pre&gt;</content>
  </entry>
  <entry>
    <title>use bootstrap and sass in a semantic way</title>
    <link rel="alternate" href="http://blog.url.com/2014/02/24/use-bootstrap-and-sass-in-a-semantic-way/"/>
    <id>http://blog.url.com/2014/02/24/use-bootstrap-and-sass-in-a-semantic-way/</id>
    <published>2014-02-24T03:46:00Z</published>
    <updated>2014-02-24T15:34:47+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Using twitter bootstrap directly means mix things together&lt;/h2&gt;

&lt;p&gt;When developing the web page, using bootstrap could accelerate the process. But
mixing the content and the display style is not a very good solution.&lt;/p&gt;

&lt;p&gt;So we try to use SASS to isolate the styles, and make the html more semantic.&lt;/p&gt;

&lt;h2&gt;SASS features that helps&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins"&gt;mixins&lt;/a&gt;
and
&lt;a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#extend"&gt;extend&lt;/a&gt;
allow you to define styles that can be re-used throughout the stylesheet
without needing to resort to non-semantic classes like .float-left&lt;/p&gt;

&lt;h2&gt;Convert an example that use bootstrap style to semantic html&lt;/h2&gt;

&lt;p&gt;The original index.haml:&lt;/p&gt;
&lt;pre class="highlight haml"&gt;
&lt;span class="nf"&gt;#main&lt;/span&gt;
  &lt;span class="nt"&gt;%a&lt;/span&gt;&lt;span class="nc"&gt;.btn.btn-primary&lt;/span&gt; Press Me

&lt;/pre&gt;
&lt;p&gt;using extend, we use more meaningful class: &amp;ldquo;highlight&amp;rdquo;, and convert the above code into following haml:&lt;/p&gt;
&lt;pre class="highlight haml"&gt;&lt;span class="nf"&gt;#main&lt;/span&gt;
  &lt;span class="nt"&gt;%a&lt;/span&gt;&lt;span class="nc"&gt;.highlight&lt;/span&gt;

&lt;/pre&gt;
&lt;p&gt;and the scss file: &lt;/p&gt;
&lt;pre class="highlight scss"&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;variables&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bootstrap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nn"&gt;#main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nc"&gt;.highlight&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;@extend&lt;/span&gt; &lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;@extend&lt;/span&gt; &lt;span class="nc"&gt;.btn-primary&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It seems like that we have to write more lines, but isolating things will pay
the costs in the long term when the project grow bigger.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Combine Backbone and React.js</title>
    <link rel="alternate" href="http://blog.url.com/2014/02/20/combine-backbone-and-react-js/"/>
    <id>http://blog.url.com/2014/02/20/combine-backbone-and-react-js/</id>
    <published>2014-02-20T03:42:00Z</published>
    <updated>2014-02-20T14:24:07+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Get the best of both Backbone and React.js&lt;/h2&gt;

&lt;p&gt;Backbone is a small and simple framework for Single Page Application. But
rendering views is hard, so let&amp;rsquo;s try to use React.js together, and let
React.js to finish the hard work for us.&lt;/p&gt;

&lt;h2&gt;React.js Framework&lt;/h2&gt;

&lt;h3&gt;JSX syntax&lt;/h3&gt;

&lt;p&gt;We can use coffeescript to make writting component easier directly in the
coffeescript without compiling first&lt;/p&gt;

&lt;h3&gt;Object Definition and Intializaion&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;to define a component: &lt;code&gt;React.createClass&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;use the component, and pass the props: &lt;code&gt;React.renderComponent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;called automatically by React before a component is rendered: &lt;code&gt;componentWillMount&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;called before unmount component: &lt;code&gt;componentWillUnmount&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Reactive state&lt;/h3&gt;

&lt;p&gt;render() methods are written declaratively as functions of &lt;code&gt;this.props&lt;/code&gt; and
&lt;code&gt;this.state.&lt;/code&gt; The framework guarantees the UI is always consistent with the
inputs.&lt;/p&gt;

&lt;p&gt;React.js will automatically update the view according to the state&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;initialize the state: &lt;code&gt;getInitialState&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;update the state: &lt;code&gt;this.setState()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;React events&lt;/h3&gt;

&lt;p&gt;event handler should only returns false to avoid the default action&lt;/p&gt;

&lt;h3&gt;refs&lt;/h3&gt;

&lt;p&gt;refs are defined in the JSX, and use &lt;code&gt;getDOMNode()&lt;/code&gt; to get the native DOM element&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;refs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDOMNode&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/pre&gt;
&lt;h2&gt;Communication&lt;/h2&gt;

&lt;h3&gt;Communication from React Component to Backbone&lt;/h3&gt;

&lt;p&gt;pass the callback as the React Component&amp;rsquo;s callback using &lt;code&gt;props&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;Communication from Backbone to React Component&lt;/h3&gt;

&lt;p&gt;use Backbone Model&amp;rsquo;s event binding, like:&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;on&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;change&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;forceUpdate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;</content>
  </entry>
</feed>
